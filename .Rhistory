summary(Pooled)
#Modelo de efectos aleatorios.
Random = plm(lwage~educ+black+hisp+exper+exper2+married+union+yr,
data=panel.Education , model="random")
summary(Random)
#Modelo de efectos fijos.
Fixed = plm(lwage~exper2+married+union+yr,
data=panel.Education, model="within")
summary(Fixed)
#Modelo de primeras diferencias.
FD = plm(lwage~exper2+married+union+yr,
data=panel.Education, model="fd")
summary(FD)
#Presentación de resultados.
stargazer(Pooled,Random,Fixed,FD, type="text",
column.labels=c("OLS","RE","FE", "PD"),keep.stat=c("n","rsq"))
#Elección del modelo ---------------------------------------------------------------------
#Prueba Breush-Pagan ( Ho: Homocedasticidaad)
bptest(Pooled) # si p-value>5% posiblemente es Pooled
#Pooled VS Efectos fijos
#Prueba de Multiplicadores de Lagrange de Breusch-Pagan para E.A
plmtest(Random,type = "bp")  #Ho:Mejor Pooled porque var(ai)=0
#H1:Se prefiere EA
# ¿El efecto es individual, temporal, o ambos?
plmtest(Pooled,"time","bp")     #Ho:Efectos temporales no significativos
plmtest(Pooled,"individual","bp")     #Ho:Efectos indivuduales no significativos
plmtest(Pooled,"twoways","bp")     #Ho:Efectos temporales e individuales no significativos
#¿es mejor Efectos fijos o Efectos Aleatorios?
#Test de Hausman para comparar EF vs EA
phtest(Fixed, Random) #Ho: Los modelos son equivalentes estadisticamente, por eficiencia elijo EA.
#Test de Primeras diferencias de Wooldridge para comparar EF vs PD
pwfdtest(lwage~exper2+married+union+yr, data=panel.Education,h0= "fe") #H0 = corr(Uij,Uij-1) = 0
pwfdtest(lwage~exper2+married+union+yr, data=panel.Education,h0= "fd") #H0 = errores diferenciados no correlacionados
#La prueba no es concluyente, tanto los erróres diferenciados como sin diferenciar tienen correlación serial.
#Validación de supuestos------------------------------------------------------------------
#Prueba de heterocedasticidad
bptest(Pooled);bptest(Random);bptest(Fixed); bptest(FD)
#Test Breusch-Godfrey para autocorrelación de orden p
bgtest(Pooled);bgtest(Random);bgtest(Fixed);bgtest(FD)
#Breusch-Pagan LM test for cross-sectional dependence in panels
pcdtest(Pooled,test = "lm");pcdtest(Random,test = "lm");pcdtest(Fixed,test = "lm");pcdtest(FD,test = "lm")
#Correción de correlación serial para EF.
MCOV=vcovHC.plm(Fixed, method=c("arellano"))
MCOV1=vcovHC(Fixed, method="arellano")
coeftest(Fixed,MCOV)
coeftest(Fixed,MCOV1)
help("vcovHC.plm")
#Análisis de Normalidad.
hist(residuals(Fixed))
qqnorm(residuals(Fixed))
qqline(residuals(Fixed))
#Es deseable que se ajusten a la linea de tendencia para cumplir normalidad
jarque.bera.test(residuals(Fixed))
#OTRO EJEMPLO:----------------------------------------------------------------------------
#En este ejercicio se utiliza la base de datos JTRAIN.RAW para determinar el efecto del
#subsidio a la capacitación laboral en las horas de capacitación por empleado. El modelo
#básico para los tres años es:
#hrsemp~ Bo + S1d88 + S2d89+ B1grant + B2grant_1 + B3lemploy + ai + uit
#Utilizaremos la base de datos Jtrain
data("jtrain")
attach(jtrain)
##Definimos el objeto como un panel de datos
panel.jtrain = pdata.frame(jtrain, index = c("fcode","year"))
#Analizamos las caracteristicas de
View(jtrain)
pdim(panel.jtrain)
pvar(panel.jtrain)
#Creamos la dummy para cada uno de los años
years <- factor(panel.jtrain$year)
#Estimamos el modelo de EF, EA y PD
EF.jtrain = plm(hrsemp~years+ grant + grant_1 + lemploy,
data=panel.jtrain, model="within")
PD.jtrain = plm(hrsemp~years+ grant + grant_1 + lemploy,
data=panel.jtrain, model="fd")
EA.jtrain = plm(hrsemp~years+ grant + grant_1 + lemploy,
data=panel.jtrain, model="random")
#Resultados
summary(EF.jtrain); summary(PD.jtrain); summary(EA.jtrain)
stargazer(EF.jtrain,PD.jtrain,EA.jtrain,type="text",
column.labels=c("Efectos Fijos", "Primeras Diferencias",
"Efectos Aleatorios"),keep.stat=c("n","rsq"))
#--------------------------------------------------------------------------------------------------
#QUEDA COMO EJERCICIO REALIZAR LAS PRUEBAS RESPECTIVAS PARA COMPARAR LOS MODELOS,Así
#COMO LA RESPECTIVA VALIDACIÓN DE SUPUESTOS Y SU RESPECTIVA CORRECCIÓN,CUANDO SEA NECESARIO.
#--------------------------------------------------------------------------------------------------
?rnorm
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
prueba_1
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
prueba_1
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
prueba_1
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
library(dplyr)
glimpse(ols)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
glimpse(ols)
mean(ols$b)
var(ols$b)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
rm(list = ls())
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
# ols es un data frame que contiene todos los coeficientes estimados por OLS
ols = monte_carlo_media(10, 20, 10, 1000)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
ols_varianza_poblacional = monte_carlo_varianza_poblacional(10, 20, 10, 1000)
2 * 10**4 / (10 - 1)
2 * 10**2 / (10 - 1)
glimpse(ols_media_poblacional)
glimpse(ols_varianza_poblacional)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1')
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
library(tidyverse)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Camilo/R/personal/montecarlo")
##______________________________________________________________________________
##______________________________________________________________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                              ECONOMETRIA II
#                 Simulación de Monte Carlo : Regresión lineal simple
##______________________________________________________________________________
##______________________________________________________________________________
################################### Descripción de la simulación #################################
# El script simulara las propiedades muestrales del estimador de MCO
# Modelo: y_i ~ beta_0 + beta_1 x_i + e_i
# Se simulara con:
#### beta_0 = 7.3832
#### beta_1 = 0.2323
#### sigma2 = 46.853
#### T = 40 (tamaño de cada muestra )
#### e_i (error normal)
# Todos los anteriores parámetros de la simulación se pueden modificar fácilmente al ser variables
# de las funciones de Monte Carlo definidas abajo
###################################################################################################
library(tidyverse)
setwd("~/Camilo/R/personal/montecarlo")
data = read_csv("Tabla5-2.csv")
glimpse(data)
data
setwd("~/Camilo/R/personal/montecarlo")
data = read_csv("Tabla5-2.csv")
set.seed(12345)
setwd("~/Camilo/R/personal/montecarlo")
library(readxl)
data = read_csv("Tabla5-2.csv")
library(readxl)
data = read_csv("Tabla5-2.csv")
library(readr)
data = read_csv("Tabla5-2.csv")
dplyr::glimpse(data)
glimpse(data)
##______________________________________________________________________________
##______________________________________________________________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                              ECONOMETRIA II
#                 Simulación de Monte Carlo : Regresión lineal simple
##______________________________________________________________________________
##______________________________________________________________________________
################################### Descripción de la simulación #################################
# El script simulara las propiedades muestrales del estimador de MCO
# Modelo: y_i ~ beta_0 + beta_1 x_i + e_i
# Se simulara con:
#### beta_0 = 7.3832
#### beta_1 = 0.2323
#### sigma2 = 46.853
#### T = 40 (tamaño de cada muestra )
#### e_i (error normal)
# Todos los anteriores parámetros de la simulación se pueden modificar fácilmente al ser variables
# de las funciones de Monte Carlo definidas abajo
###################################################################################################
library(tidyverse)
library(broom)
setwd("~/Camilo/R/personal/montecarlo")
data = read_csv("Tabla5-2.csv")
glimps(data)
glimpse(data)
mod = lm(expenditure ~ income, data = data)
summary(mod)
glimpse(mod)
glimpse(mod)
str(mod)
class(mod)
library(broom)
tidy(mod)
?tidy
?tidy
glance(mod)
augument(mod)
augumented(mod)
augment(mod)
data = read_csv("Tabla5-2.csv")
vignette("available-methods")
tidy(mod)
glance(mod)
mod$coefficients
class(mod$coefficients)
summary(mod)
summary(mod$df.residual)
mod$df.residual
mod$residuals
mod$fitted.values
mod$model
mod$effects
mod$rank
mod$assign
mod$qr
mod$df.residual
mod$xlevels
mod$call
mod$terms
tidy(mod)
hola = tidy(mod)
class(hola)
glimpse(hola)
hola$estimate
hola$estimate[0]
hola$estimate[1]
glance(hola)
glance(hola)
hola
glance(mod)
ols_regression = function(formula, df){
mod = lm(formula, data = df)
mod_df = tidy(mod)
return(mod)
}
glimpse(data)
ols_regression = function(formula, df){
mod = lm(formula, data = df)
mod_df = tidy(mod)
return(mod)
}
formula = expenditure ~ income
prueba = ols_regression(formula, data)
glimpse(prueba)
prueba
ols_regression = function(formula, df){
mod = lm(formula, data = df)
mod_df = tidy(mod)
return(mod_df)
}
prueba = ols_regression(formula, data)
glimpse(prueba)
prueba$estimate
prueba$estimate[1]
prueba$std.error[1]^2
prueba$std.error[2]^2
prueba2 = glance(mod)
prueba2
prueba2$sigma
prueba$std.error
glimpse(data)
##______________________________________________________________________________
##______________________________________________________________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                              ECONOMETRIA II
#                 Simulación de Monte Carlo : Regresión lineal simple
##______________________________________________________________________________
##______________________________________________________________________________
################################### Descripción de la simulación #################################
# El script simulara las propiedades muestrales del estimador de MCO
# Modelo: y_i ~ beta_0 + beta_1 x_i + e_i
# Se simulara con:
#### beta_0 = 7.3832
#### beta_1 = 0.2323
#### sigma2 = 46.853
#### T = 40 (tamaño de cada muestra )
#### e_i (error normal)
# Todos los anteriores parámetros de la simulación se pueden modificar fácilmente al ser variables
# de las funciones de Monte Carlo definidas abajo
###################################################################################################
library(tidyverse)
library(broom)  # Es un paquete fundamental para interactuar con diferentes objetos de regresión
# Para saber que objetos son compatibles con broom: vignette("available-methods")
setwd("~/Camilo/R/personal/montecarlo")
data = read_csv("Tabla5-2.csv")
set.seed(12345)
random_sampling = function(sample_size, params_vect, x){
# T is the sample size
# pop_mean is the population mean
# pop_variance is the population variance
error = rnorm(n = sample_size, mean = 0, sd = sqrt(params_vect[3]))
dependent = params_vect[1] + params_vect[2] * x + error
return(dependent) # la función retorna la variable dependiente simulada
}
ols_regression = function(formula, df){
mod = lm(formula, data = df)
mod_df = tidy(mod)
return(mod_df)
}
ols_population_variance = function(formula, df){
mod = lm(formula, data = df)
mod_df = glance(mod)
return(mod_df)
}
# La simulación de Monte Carlo simula los beta1, beta2, sigma, var(b1), var(b2)
monte_carlo = function(formula, df, params_vect, sample_size, n_sim){
param_df = data.frame(b0 = double(), b1 = double(), sigma2 = double(), varb1 = double(), varb2 = double())
for (i in 1:n_sim){
y = random_sampling(sample_size, beta_0, beta_1 , pop_var, x)
estimate_b = ols_regression(formula, df)$estimate
sigma = ols_population_variance(formula, df)$sigma
sd_b = ols_regression(formula, df)$std.error$std.error
param_df[i,] = c(estimate_b[1], estimate_b[2], sigma, (sd_b[1])^2, (sd_b[2])^2)
}
return(param_df)
}
# ols_media_poblacional y ols_varianza_poblacional son data frame que contienen todos los coeficientes
# estimados por OLS para le media y la varianza poblacional respectivamente que surgen de la simulación de monte Carlo
# experimento monte carlo para media poblacional
params_vect = c(7.3832, 0.2323, 46.853)
ols_sim = monte_carlo(expenditure ~ income, data, params_vect, 40, 1000)
glimpse(ols_sim)
##______________________________________________________________________________
##______________________________________________________________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                              ECONOMETRIA II
#                 Simulación de Monte Carlo : Regresión lineal simple
##______________________________________________________________________________
##______________________________________________________________________________
################################### Descripción de la simulación #################################
# El script simulara las propiedades muestrales del estimador de MCO
# Modelo: y_i ~ beta_0 + beta_1 x_i + e_i
# Se simulara con:
#### beta_0 = 7.3832
#### beta_1 = 0.2323
#### sigma2 = 46.853
#### T = 40 (tamaño de cada muestra )
#### e_i (error normal)
# Todos los anteriores parámetros de la simulación se pueden modificar fácilmente al ser variables
# de las funciones de Monte Carlo definidas abajo
###################################################################################################
library(tidyverse)
library(broom)  # Es un paquete fundamental para interactuar con diferentes objetos de regresión
# Para saber que objetos son compatibles con broom: vignette("available-methods")
setwd("~/Camilo/R/personal/montecarlo")
data = read_csv("Tabla5-2.csv")
set.seed(12345)
random_sampling = function(sample_size, params_vect, x){
# T is the sample size
# pop_mean is the population mean
# pop_variance is the population variance
error = rnorm(n = sample_size, mean = 0, sd = sqrt(params_vect[3]))
dependent = params_vect[1] + params_vect[2] * x + error
return(dependent) # la función retorna la variable dependiente simulada
}
ols_regression = function(formula, df){
mod = lm(formula, data = df)
mod_df = tidy(mod)
return(mod_df)
}
ols_population_variance = function(formula, df){
mod = lm(formula, data = df)
mod_df = glance(mod)
return(mod_df)
}
# La simulación de Monte Carlo simula los beta1, beta2, sigma, var(b1), var(b2)
monte_carlo = function(formula, df, params_vect, sample_size, n_sim){
param_df = data.frame(b0 = double(), b1 = double(), sigma2 = double(), varb1 = double(), varb2 = double())
for (i in 1:n_sim){
y = random_sampling(sample_size, beta_0, beta_1 , pop_var, x)
estimate_b = ols_regression(formula, df)$estimate
sigma = ols_population_variance(formula, df)$sigma
sd_b = ols_regression(formula, df)$std.error$std.error
param_df[i,] = c(estimate_b[1], estimate_b[2], sigma, (sd_b[1])^2, (sd_b[2])^2)
}
return(param_df)
}
# ols_media_poblacional y ols_varianza_poblacional son data frame que contienen todos los coeficientes
# estimados por OLS para le media y la varianza poblacional respectivamente que surgen de la simulación de monte Carlo
# experimento monte carlo para media poblacional
params_vect = c(7.3832, 0.2323, 46.853)
ols_sim = monte_carlo(expenditure ~ income, data, params_vect, 40, 1000)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
class(ols_sim)
glimpse(ols_sim)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
source('~/Camilo/R/personal/montecarlo/3_6 _normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
##______________________________________________________________________________
##______________________________________________________________________________
#       UNIVERSIDAD NACIONAL DE COLOMBIA - FACULTAD DE CIENCIAS ECONÓMICAS
#                              ECONOMETRIA II
#                 Simulación de Monte Carlo : Regresión lineal simple
##______________________________________________________________________________
##______________________________________________________________________________
################################### Descripción de la simulación #################################
# El script simulara las propiedades muestrales del estimador de MCO
# Modelo: y_i ~ beta_0 + beta_1 x_i + e_i
# Se simulara con:
#### beta_0 = 7.3832
#### beta_1 = 0.2323
#### sigma2 = 46.853
#### T = 40 (tamaño de cada muestra )
#### e_i (error normal)
# Todos los anteriores parámetros de la simulación se pueden modificar fácilmente al ser variables
# de las funciones de Monte Carlo definidas abajo
###################################################################################################
library(tidyverse)
library(broom)  # Es un paquete fundamental para interactuar con diferentes objetos de regresión
# Para saber que objetos son compatibles con broom: vignette("available-methods")
setwd("~/Camilo/R/personal/montecarlo")
data = read_csv("Tabla5-2.csv")
set.seed(12345)
random_sampling = function(sample_size, params_vect, x){
# T is the sample size
# pop_mean is the population mean
# pop_variance is the population variance
error = rnorm(n = sample_size, mean = 0, sd = sqrt(params_vect[3]))
dependent = params_vect[1] + params_vect[2] * x + error
return(dependent) # la función retorna la variable dependiente simulada
}
ols_regression = function(formula, df){
mod = lm(formula, data = df)
mod_df = tidy(mod)
return(mod_df)
}
ols_population_variance = function(formula, df){
mod = lm(formula, data = df)
mod_df = glance(mod)
return(mod_df)
}
# La simulación de Monte Carlo simula los beta1, beta2, sigma, var(b1), var(b2)
monte_carlo = function(formula, df, params_vect, x, sample_size, n_sim){
param_df = data.frame(b0 = double(), b1 = double(), sigma2 = double(), varb1 = double(), varb2 = double())
for (i in 1:n_sim){
y = random_sampling(sample_size, params_vect, x)
estimate_b = ols_regression(formula, df)$estimate
sigma = ols_population_variance(formula, df)$sigma
sd_b = ols_regression(formula, df)$std.error
param_df[i,] = c(estimate_b[2], estimate_b[1], sigma, (sd_b[2])^2, (sd_b[1])^2)
}
return(param_df)
}
# ols_media_poblacional y ols_varianza_poblacional son data frame que contienen todos los coeficientes
# estimados por OLS para le media y la varianza poblacional respectivamente que surgen de la simulación de monte Carlo
# experimento monte carlo para media poblacional
params_vect = c(7.3832, 0.2323, 46.853)
income = data$income
ols_sim = monte_carlo(expenditure ~ income, data, params_vect, income, 40, 1000)
glimpse(ols_sim)
hist_sim = ols_sim %>%
ggplot(aes(x = b1)) +
geom_histogram()
# histograma que demuestra el estimador OLS de la media poblacional es normal
hist_sim
source('~/.active-rstudio-document', echo=TRUE)
hist_sim = ols_sim %>%
ggplot(aes(x = b1, y = ..count..)) +
geom_histogram( stat = "bin",
position = "stack")
# histograma que demuestra el estimador OLS de la media poblacional es normal
hist_sim
glimpse(ols_sim)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
glimpse(ols_sim)
mean(b0)
mean(ols_sim$b0)
mean(ols_sim$b1)
mean(ols_sim$sigma2)
source('~/Camilo/R/personal/montecarlo/6_5_normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
mean(ols_sim$sigma2)
mean(ols_sim$varb1)
mean(ols_sim$varb2)
source('~/Camilo/R/personal/montecarlo/6_5_normalito.R', encoding = 'ISO-8859-1', echo=TRUE)
hist_sim = ols_sim %>%
ggplot(aes(x = b1)) +
geom_histogram(fill = 'orange') +
theme_light()
hist_sim
source('~/Camilo/R/personal/montecarlo/prueba.R', encoding = 'ISO-8859-1', echo=TRUE)
df_completo
glimpse(df_completo)
source('~/Camilo/R/personal/montecarlo/prueba.R', encoding = 'ISO-8859-1', echo=TRUE)
glimpse(df_completo)
